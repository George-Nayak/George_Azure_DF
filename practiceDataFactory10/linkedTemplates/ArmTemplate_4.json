{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "practiceDataFactory10"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow3-Aggregate Opeartion",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow3_Aggregate_operation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empData": {},
									"Deptdata": {},
									"OutputData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow4-Conditional Split",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow4_Conditional_Split",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empData": {},
									"outputdata": {},
									"softwareOutputData": {},
									"DataEmployeeData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline5')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow5-Derived column data",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow5_Derived_column_operation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmpData": {},
									"outputData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline6')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow6 exists operation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow6_exists_operation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empData": {},
									"deptData": {},
									"outputData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline7')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow7 union operation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow7_union_operation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"HrData": {},
									"SoftwareData": {},
									"Datadata": {},
									"outputData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline8')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow8 lookup operation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow8_lookup_operation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empData": {},
									"deptData": {},
									"outputData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline9')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow9 new_branch_operation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow9_new_branch_operation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empData": {},
									"DeptData": {},
									"outputData": {},
									"outputDataNewbranch": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipeline21",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 3,
						"startTime": "2024-09-08T15:54:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow14_alterrow_opeartion')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empData",
								"type": "DatasetReference"
							},
							"name": "empData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "employesSqlTable",
								"type": "DatasetReference"
							},
							"name": "outPutData"
						}
					],
					"transformations": [
						{
							"name": "alterRowForGender"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empname as string,",
						"          Gender as string,",
						"          Country as string,",
						"          Salary as string,",
						"          DeptID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empData",
						"empData alterRow(deleteIf(Gender=='Female'),",
						"     upsertIf(DeptID=='2')) ~> alterRowForGender",
						"alterRowForGender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          empid as string,",
						"          empname as string,",
						"          Gender as string,",
						"          Country as string,",
						"          Salary as string,",
						"          DeptID as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:true,",
						"     keys:['empid'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          empid,",
						"          empname,",
						"          Gender,",
						"          Country,",
						"          Salary,",
						"          DeptID",
						"     )) ~> outPutData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow16_error_rows_handle')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Real Time scenarios"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SalesDataINDMay",
								"type": "DatasetReference"
							},
							"name": "Salesdatamay"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "GlobalSalesbadAzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "SqlTableLoadbadSalesData"
						},
						{
							"dataset": {
								"referenceName": "GlobalSalesdataSqlTable",
								"type": "DatasetReference"
							},
							"name": "goodSalesDataLoadToSQLTable"
						}
					],
					"transformations": [
						{
							"name": "splitOnDateColumn"
						},
						{
							"name": "derivedColumnForFileName"
						},
						{
							"name": "derivedColumnForFileNameGoodSales"
						}
					],
					"scriptLines": [
						"source(output(",
						"          saleDate as string,",
						"          saleItem as string,",
						"          country as string,",
						"          quantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Salesdatamay",
						"Salesdatamay split(isNull(toDate(saleDate, 'dd-MMM-yyyy')),",
						"     disjoint: false) ~> splitOnDateColumn@(ErrorRows, GoodRows)",
						"splitOnDateColumn@ErrorRows derive(fileName = 'Global_sales_IND_May_2020_01.csv') ~> derivedColumnForFileName",
						"splitOnDateColumn@GoodRows derive(fileName = 'Global_sales_IND_May_2020_01.csv',",
						"          saleDate = toDate(saleDate, 'dd-MMM-yyyy'),",
						"          quantity = toInteger(quantity)) ~> derivedColumnForFileNameGoodSales",
						"derivedColumnForFileName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          saleDate as string,",
						"          saleItem as string,",
						"          country as string,",
						"          quantity as integer,",
						"          fileName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          saleDate,",
						"          saleItem,",
						"          country,",
						"          quantity,",
						"          fileName",
						"     )) ~> SqlTableLoadbadSalesData",
						"derivedColumnForFileNameGoodSales sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          saleDate as date,",
						"          saleItem as string,",
						"          country as string,",
						"          quantity as integer,",
						"          fileName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          saleDate,",
						"          saleItem,",
						"          country,",
						"          quantity,",
						"          fileName",
						"     )) ~> goodSalesDataLoadToSQLTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow21_SCD_Type1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Real Time scenarios"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empData",
								"type": "DatasetReference"
							},
							"name": "empData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "employesSqlTable",
								"type": "DatasetReference"
							},
							"name": "sqlOutputData"
						}
					],
					"transformations": [
						{
							"name": "alterRowToUpsertData"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empname as string,",
						"          Gender as string,",
						"          Country as string,",
						"          Salary as string,",
						"          DeptID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empData",
						"empData alterRow(upsertIf(1==1)) ~> alterRowToUpsertData",
						"alterRowToUpsertData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          empid as string,",
						"          empname as string,",
						"          Gender as string,",
						"          Country as string,",
						"          Salary as string,",
						"          DeptID as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['empid'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          empid,",
						"          empname,",
						"          Gender,",
						"          Country,",
						"          Salary,",
						"          DeptID",
						"     )) ~> sqlOutputData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow22_SCD_Type2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Real Time scenarios"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmpSCD2data",
								"type": "DatasetReference"
							},
							"name": "empSCD2Data"
						},
						{
							"dataset": {
								"referenceName": "SCD2EmpSqlTable",
								"type": "DatasetReference"
							},
							"name": "ExistingSQLSCD2EmpTableData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SCD2EmpSqlTable",
								"type": "DatasetReference"
							},
							"name": "empSCD2SQLTable"
						},
						{
							"dataset": {
								"referenceName": "SCD2EmpSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink2OnlyToUpdate"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1AddedIsactive1"
						},
						{
							"name": "select1RenamingSQLCol"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "filter1NotNullRows"
						},
						{
							"name": "select2KeepOnlySQLColumns"
						},
						{
							"name": "derivedColumn2SQLISActive0"
						},
						{
							"name": "alterRow1ToOnlyUpdateExsitingRecord"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as integer,",
						"          empName as string,",
						"          gender as string,",
						"          country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empSCD2Data",
						"source(output(",
						"          SurrKey as integer,",
						"          emp_id as integer,",
						"          empName as string,",
						"          gender as string,",
						"          country as string,",
						"          is_active as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ExistingSQLSCD2EmpTableData",
						"empSCD2Data derive(is_active = 1) ~> derivedColumn1AddedIsactive1",
						"ExistingSQLSCD2EmpTableData select(mapColumn(",
						"          SQL_SurrKey = SurrKey,",
						"          SQL_emp_id = emp_id,",
						"          SQL_empName = empName,",
						"          SQL_gender = gender,",
						"          SQL_country = country,",
						"          SQL_is_active = is_active",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1RenamingSQLCol",
						"empSCD2Data, select1RenamingSQLCol lookup(emp_id == SQL_emp_id,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 filter(!isNull(SQL_emp_id)) ~> filter1NotNullRows",
						"filter1NotNullRows select(mapColumn(",
						"          SQL_SurrKey,",
						"          SQL_emp_id,",
						"          SQL_empName,",
						"          SQL_gender,",
						"          SQL_country,",
						"          SQL_is_active",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2KeepOnlySQLColumns",
						"select2KeepOnlySQLColumns derive(SQL_is_active = 0) ~> derivedColumn2SQLISActive0",
						"derivedColumn2SQLISActive0 alterRow(updateIf(1==1)) ~> alterRow1ToOnlyUpdateExsitingRecord",
						"derivedColumn1AddedIsactive1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SurrKey as integer,",
						"          emp_id as integer,",
						"          empName as string,",
						"          gender as string,",
						"          country as string,",
						"          is_active as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          emp_id,",
						"          empName,",
						"          gender,",
						"          country,",
						"          is_active",
						"     )) ~> empSCD2SQLTable",
						"alterRow1ToOnlyUpdateExsitingRecord sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SurrKey as integer,",
						"          emp_id as integer,",
						"          empName as string,",
						"          gender as string,",
						"          country as string,",
						"          is_active as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['SurrKey'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SurrKey = SQL_SurrKey,",
						"          emp_id = SQL_emp_id,",
						"          empName = SQL_empName,",
						"          gender = SQL_gender,",
						"          country = SQL_country,",
						"          is_active = SQL_is_active",
						"     )) ~> sink2OnlyToUpdate"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline14')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow14 Alter row operation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow14_alterrow_opeartion",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empData": {},
									"outPutData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow14_alterrow_opeartion')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline16')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow16 error_rows_handle",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow16_error_rows_handle",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Salesdatamay": {},
									"SqlTableLoadbadSalesData": {},
									"goodSalesDataLoadToSQLTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Real Time scenario"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow16_error_rows_handle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline25')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow21 SCD Type1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow21_SCD_Type1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empData": {},
									"sqlOutputData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Real Time scenario"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow21_SCD_Type1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline28')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow22SCType2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow22_SCD_Type2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empSCD2Data": {},
									"ExistingSQLSCD2EmpTableData": {},
									"empSCD2SQLTable": {},
									"sink2OnlyToUpdate": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Real Time scenario"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow22_SCD_Type2')]"
			]
		}
	]
}