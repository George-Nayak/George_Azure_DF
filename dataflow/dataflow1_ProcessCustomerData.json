{
	"name": "dataflow1_ProcessCustomerData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CustomerTableData",
						"type": "DatasetReference"
					},
					"name": "sourceCustomerdata"
				},
				{
					"dataset": {
						"referenceName": "CustomerAdress",
						"type": "DatasetReference"
					},
					"name": "sourceCustomeradressData"
				},
				{
					"dataset": {
						"referenceName": "AddressTableData",
						"type": "DatasetReference"
					},
					"name": "sourceAdresstableData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CustomerDatafloeAddressData",
						"type": "DatasetReference"
					},
					"name": "sinkToLoadCustomerandhisAdressdata"
				}
			],
			"transformations": [
				{
					"name": "joiningCUSTtoCustAdress"
				},
				{
					"name": "joinPrev2sourceWithAddress"
				},
				{
					"name": "selectonlyRequiredCoumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as string,",
				"          NameStyle as string,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          Phone as string,",
				"          PasswordHash as string,",
				"          PasswordSalt as string,",
				"          rowguid as string,",
				"          ModifiedDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> sourceCustomerdata",
				"source(output(",
				"          CustomerID as string,",
				"          AddressID as string,",
				"          AddressType as string,",
				"          rowguid as string,",
				"          ModifiedDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> sourceCustomeradressData",
				"source(output(",
				"          AddressID as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          StateProvince as string,",
				"          CountryRegion as string,",
				"          PostalCode as string,",
				"          rowguid as string,",
				"          ModifiedDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> sourceAdresstableData",
				"sourceCustomerdata, sourceCustomeradressData join(sourceCustomerdata@CustomerID == sourceCustomeradressData@CustomerID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joiningCUSTtoCustAdress",
				"joiningCUSTtoCustAdress, sourceAdresstableData join(sourceCustomeradressData@AddressID == sourceAdresstableData@AddressID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPrev2sourceWithAddress",
				"joinPrev2sourceWithAddress select(mapColumn(",
				"          CustomerID = sourceCustomerdata@CustomerID,",
				"          FirstName,",
				"          LastName,",
				"          CompanyName,",
				"          EmailAddress,",
				"          Phone,",
				"          CustomerID = sourceCustomeradressData@CustomerID,",
				"          AddressID = sourceCustomeradressData@AddressID,",
				"          AddressID = sourceAdresstableData@AddressID,",
				"          AddressLine1,",
				"          City,",
				"          CountryRegion,",
				"          PostalCode",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectonlyRequiredCoumns",
				"selectonlyRequiredCoumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          FirstName,",
				"          LastName,",
				"          CompanyName,",
				"          EmailAddress,",
				"          Phone,",
				"          CustomerID,",
				"          AddressID,",
				"          AddressLine1,",
				"          City,",
				"          CountryRegion,",
				"          PostalCode",
				"     )) ~> sinkToLoadCustomerandhisAdressdata"
			]
		}
	}
}