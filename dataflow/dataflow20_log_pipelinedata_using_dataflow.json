{
	"name": "dataflow20_log_pipelinedata_using_dataflow",
	"properties": {
		"folder": {
			"name": "Real Time scenarios"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dummyData",
						"type": "DatasetReference"
					},
					"name": "duumyData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "logsData",
						"type": "DatasetReference"
					},
					"name": "logOutputData"
				}
			],
			"transformations": [
				{
					"name": "derivedColumnTologPipelinelogs"
				},
				{
					"name": "selectReqColumns"
				}
			],
			"scriptLines": [
				"parameters{",
				"     adfName as string,",
				"     pipelineName as string,",
				"     triggerName as string,",
				"     runId as string,",
				"     triggerTime as string,",
				"     status as string,",
				"     fileName as string",
				"}",
				"source(output(",
				"          Column_1 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> duumyData",
				"duumyData derive(adfName = $adfName,",
				"          pipelineName = $pipelineName,",
				"          triggerName = $triggerName,",
				"          runId = $runId,",
				"          triggerTime = $triggerTime,",
				"          status = $status,",
				"          fileName = $fileName) ~> derivedColumnTologPipelinelogs",
				"derivedColumnTologPipelinelogs select(mapColumn(",
				"          adfName,",
				"          pipelineName,",
				"          triggerName,",
				"          runId,",
				"          triggerTime,",
				"          status,",
				"          fileName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectReqColumns",
				"selectReqColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          saleDate as string,",
				"          saleItem as string,",
				"          country as string,",
				"          quantity as string",
				"     ),",
				"     partitionFileNames:[($fileName)],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> logOutputData"
			]
		}
	}
}